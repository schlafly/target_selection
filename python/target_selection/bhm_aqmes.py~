# encoding: utf-8
#
# @Author: Tom Dwelly
# @Date: Jan 2020
# @Filename: bhm_aqmes.py
# @License: BSD 3-Clause
# @Copyright: Tom Dwelly
# Content:
#    Target selection for the AQMES components of BHM
#    AQMES targets are taken from SDSS QSO catalogue (DR16Q)

from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals




def get_aqmes_initial_candidates(self):
    '''
    Carry out initial target selection for the BHM_AQMES components
    Using the DR1xQ catalogue as the basis
        '''
        if (self.catalog_format.upper() == 'FITS' or
            self.catalog_format.upper() == 'QSO' ) :
            col_dict={'col_id':'THING_ID',
                      'col_ra':'RA',
                      'col_dec':'DEC'}
            hdul = fitsio.FITS(self.catalog_filename)
            columns = list(col_dict.values())
            w=hdul[1].where(self.fits_selection_expr)
            targets = hdul[1][columns][w]
            hdul.close()

            print_comment("Num QSOs meeting FITS selection ({}): {}".format(
                self.fits_selection_expr,
                len(targets)))

        elif self.catalog_format.upper() == 'DB':
            col_dict={'col_id':'pk',
                      'col_ra':'ra',
                      'col_dec':'dec'}
            columns = list(col_dict.values())

            targets = retrieve_targets_from_catalogdb(tablename=self.db_table,
                                                      constraints=self.peewee_selection_expr,
                                                      fmt='recarray',
                                                      columns=columns)
            print_comment("Num QSOs meeting PeeWee selection ({}): {}".format(
                self.peewee_selection_expr,
                len(targets)))

        else:
            raise Exception(f'Unknown catalogue format: {self.catalog_format}')

        return targets, col_dict
